<!--
	Ant build script to build the Cinnamon Safran client library distributed libs.
    This is an example build script, you should copy and modify it to meet your preferences / system configuration.
    Note that this script does not package all required libraries into the resulting safran.jar by default,
    but only the ones which are not supplied by other modules. For example, the RenderServer needs slf4j too, so it
    is not included in the safran.jar.
-->

<project name="Safran">
    <description>
        Build file for the Cinnamon Client library
    </description>

    <!-- properties -->
    <property environment="env"/>
    <property name="workspace.home" value="${env.CINNAMON2_SOURCE}"/>
    <property name="lib.home" value="${env.JAVA_LIB_HOME}"/>

    <property name="safran.home" value="${workspace.home}/CinnamonClient"/>
    <property name="safran.src" value="${safran.home}/src"/>
    <property name="safran.build" value="${safran.home}/build"/>
    <property name="safran.build.classes" value="${safran.build}/classes"/>
    <property name="safran.target" value="${safran.home}/target"/>
    <property name="safran.jar" value="${safran.target}/safran.jar"/>
    <property name="safran.full.jar" value="${safran.target}/target/safran.full.jar"/>
    <property name="safran.mini.jar" value="${safran.target}/target/safran.mini.jar"/>

    <property name="docs.home" value="${safran.home}/docs"/>

    <property name="cinnamonBase.home" value="${workspace.home}/CinnamonBase"/>
    <property name="cinnamonBase.src" value="${cinnamonBase.home}/src"/>
    <property name="cinnamonBase.build" value="${cinnamonBase.home}/build"/>
    <property name="cinnamonBase.build.classes" value="${cinnamonBase.build}/classes"/>
    <property name="cinnamonBase.jar" value="${cinnamonBase.build}/cinnamonBase.jar"/>

    <property name="lib.home" value="${user.home}/java_libs"/>

    <property name="lib.testng.home" value="${lib.home}/testng-6.3.1"/>
    <property name="lib.testng" value="${lib.testng.home}/testng-6.3.1.jar"/>
    <property name="lib.commons.collections"
              value="${lib.home}/commons-collections-3.2.1/commons-collections-3.2.1.jar"/>
    <property name="lib.commons.httpclient.home" value="${lib.home}/commons-httpclient-3.1"/>
    <property name="lib.commons.httpclient" value="${lib.commons.httpclient.home}/commons-httpclient-3.1.jar"/>
    <property name="lib.commons.fileupload.path" value="${lib.home}/commons-fileupload-1.2.1/lib"/>
    <property name="lib.commons.fileupload.name" value="commons-fileupload-1.2.1.jar"/>
    <property name="lib.commons.fileupload" value="${lib.commons.fileupload.path}/${lib.commons.fileupload.name}"/>
    <property name="lib.commons.logging.home" value="${lib.home}/commons-logging-1.1.1"/>
    <property name="lib.commons.logging" value="${lib.commons.logging.home}/commons-logging-1.1.1.jar"/>
    <property name="lib.commons.logging.api" value="${lib.commons.logging.home}/commons-logging-api-1.1.1.jar"/>
    <property name="lib.commons.io.home" value="${lib.home}/commons-io-2.1"/>
    <property name="lib.commons.io" value="${lib.commons.io.home}/commons-io-2.1.jar"/>
    <property name="lib.commons.codec.home" value="${lib.home}/commons-codec-1.5"/>
    <property name="lib.commons.codec" value="${lib.commons.codec.home}/commons-codec-1.5.jar"/>

    <property name="lib.slf4j" value="${lib.home}/slf4j-1.6.4"/>
    <property name="lib.slf4j.api" value="${lib.slf4j}/slf4j-api-1.6.4.jar"/>
    <property name="lib.logback" value="${lib.home}/logback-1.0.0"/>
    <property name="lib.logback.core" value="${lib.logback}/logback-core-1.0.0.jar"/>
    <property name="lib.logback.classic" value="${lib.logback}/logback-classic-1.0.0.jar"/>
    <property name="lib.dom4j.home" value="${lib.home}/dom4j-1.6.1"/>
    <property name="lib.dom4j" value="${lib.dom4j.home}/dom4j-1.6.1.jar"/>
    <property name="lib.jaxen" value="${lib.home}/jaxen-1.1.3/jaxen-1.1.3.jar"/>
    <property name="lib.xmlunit" value="${lib.home}/xmlunit-1.3/lib/xmlunit-1.3.jar"/>

    <property name="compile.debug" value="true"/>
    <path id="compile.classpath">

        <pathelement location="${lib.testng}"/>
        <pathelement location="${lib.commons.httpclient}"/>
        <pathelement location="${lib.slf4j.api}"/>
        <fileset dir="${lib.logback}" includes="logback-c*.jar" excludes="*sources.jar"/>
        <pathelement location="${lib.dom4j}"/>
        <pathelement location="${lib.xmlunit}"/>

        <pathelement location="${lib.commons.io}"/>
        <fileset dir="${lib.commons.httpclient.home}" includes="commons-httpclient-3.1.jar"/>
        <fileset dir="${lib.commons.fileupload.path}" includes="${lib.commons.fileupload.name}"/>
        <fileset dir="${lib.commons.io.home}" includes="${lib.commons.io}"/>
    </path>


    <!-- =================================
    target: all
   ================================= -->
    <target name="all" depends="clean, compile" description="Clean build and dist directories, then compile"/>

    <!-- =================================
    target: clean
   ================================= -->
    <target name="clean" description="Delete old build and dist directories">
        <delete dir="${safran.build}"/>
        <delete dir="${cinnamonBase.build}"/>
        <delete dir="${safran.target}"/>
    </target>

    <!-- - - - - - - - - - - - - - - - - -
target: prepare
- - - - - - - - - - - - - - - - - -->

    <target name="prepare.safran" depends="" description="prepare for compilation of the Safran lib">
        <mkdir dir="${safran.target}"/>
        <mkdir dir="${safran.build}"/>
        <mkdir dir="${safran.build.classes}"/>
        <mkdir dir="${safran.build}/lib"/>

        <copy todir="${safran.build}/lib" file="${lib.commons.fileupload}"/>
        <copy todir="${safran.build}/lib" file="${lib.commons.io}"/>
        <copy todir="${safran.build}/lib" file="${lib.commons.httpclient}"/>
        <copy todir="${safran.build}/lib" file="${lib.commons.collections}"/>
        <copy todir="${safran.build}/lib" file="${lib.commons.codec}"/>
        <copy todir="${safran.build}/lib" file="${lib.commons.logging}"/>
        <copy todir="${safran.build}/lib" file="${cinnamonBase.jar}"/>
    </target>

    <!-- - - - - - - - - - - - - - - - - -
target: compile.safran
- - - - - - - - - - - - - - - - - -->
    <target name="compile" depends="compile.base, prepare.safran"
            description="compile the Safran client lib and build safran.jar">
        <javac srcdir="${safran.src}"
               destdir="${safran.build.classes}"
               debug="${compile.debug}"
                >
            <classpath>
                <path refid="compile.classpath"/>
                <pathelement location="${cinnamonBase.jar}"/>
            </classpath>
        </javac>

        <mkdir dir="${safran.build.classes}/META-INF"/>

        <jar destfile="${safran.jar}" basedir="${safran.build.classes}">
            <zipgroupfileset dir="${safran.build}/lib" includes="**/*"
                             excludes="**/slf4j-api-1.5.2* **/slf4j-api.jar **/logback* **/dom4j.jar"
                    />
            <include name="**/*.class"/>
            <include name="**/META-INF/*.xml"/>
            <include name="**/testng.xml"/>
            <include name="**/*.properties"/>

            <manifest>
                <attribute name="Main-Class" value="safran.CLI"/>
            </manifest>
        </jar>
    </target>

    <target name="prepare.base" depends="clean" description="prepare compilation of Cinnamon base lib">
        <mkdir dir="${cinnamonBase.build}"/>
        <mkdir dir="${cinnamonBase.build}/classes"/>
    </target>

    <target name="compile.base" depends="prepare.base"
            description="Compile the Cinnamon base lib and create the cinnamonBase.jar.">
        <javac srcdir="${cinnamonBase.src}"
               destdir="${cinnamonBase.build.classes}"
               debug="${compile.debug}">
            <classpath>
                <path refid="compile.classpath"/>
            </classpath>
        </javac>

        <jar destfile="${cinnamonBase.jar}" basedir="${cinnamonBase.build.classes}">
            <include name="**/*.class"/>
        </jar>
        <copy todir="${safran.home}/lib" file="${cinnamonBase.jar}"/>
    </target>

    <target name="create_full_jar" depends="compile" description="Create a safran.full.jar with all dependencies.">
        <copy todir="${safran.build}/lib" file="${lib.jaxen}"/>
        <copy todir="${safran.build}/lib" file="${lib.dom4j.home}/lib/xpp3-1.1.3.3.jar"/>
        <copy todir="${safran.build}/lib" file="${lib.dom4j}"/>
        <copy todir="${safran.build}/lib" file="${lib.jaxen}"/>
        <copy todir="${safran.build}/lib" file="${lib.xmlunit}"/>
        <copy todir="${safran.build}/lib" file="${lib.testng}"/>
        <copy todir="${safran.build}/lib" file="${lib.slf4j.api}"/>
        <copy todir="${safran.build}/lib" file="${lib.logback.classic}"/>
        <copy todir="${safran.build}/lib" file="${lib.logback.core}"/>

        <jar destfile="${safran.full.jar}" basedir="${safran.build.classes}">
            <zipgroupfileset dir="${safran.build}/lib" includes="**/*"/>
            <include name="**/*.class"/>
            <include name="**/META-INF/*.xml"/>
            <include name="**/testng.xml"/>
            <include name="**/*.properties"/>

            <manifest>
                <attribute name="Main-Class" value="safran.CLI"/>
            </manifest>
        </jar>
    </target>

    <target name="create_mini_jar" depends="compile"
            description="create a safran.mini.jar which contains only the essential Safran classes. ">
        <jar destfile="${safran.mini.jar}" basedir="${safran.build.classes}">
            <exclude name="**/test/*"/>
            <exclude name="**/setup/*"/>
            <exclude name="**/debug/*"/>
            <exclude name="**/converter/*"/>

            <include name="**/*.class"/>
            <include name="**/*.properties"/>
            <manifest>
                <attribute name="Main-Class" value="safran.CLI"/>
            </manifest>
        </jar>
    </target>

    <target name="everything" depends="all, create_mini_jar, create_full_jar"
            description="Create all jars - normal, mini, full.">
    </target>
</project>